import math
import pygame as pg
from baseForRRT import *
from mainFile import*


class Environment:
    def __init__(self, dimensions):
        self.black = (0, 0, 0)
        self.white = (255, 255, 255)
        self.green = (0, 255, 0)
        self.blue = (0, 0, 255)
        self.red = (255, 0, 0)
        self.yel = (255, 255, 0)

        # map dimensions
        self.height = dimensions[0]
        self.width = dimensions[1]

        # window settings
        pygame.display.set_caption("Robot simulation")
        self.map = pygame.display.set_mode((self.width, self.height))

        # defining the text variables
        self.font = pygame.font.Font(None, 50)
        self.text = self.font.render('default', True, self.white, self.black)
        self.textRect = self.text.get_rect()

        # location for display of the text
        self.textRect.center = (dimensions[1] - 600,
                                dimensions[0] - 100)
        # list of the trail set
        self.trailset = []

    def write_information(self, velocityLeft, velocityRight, theta):
        txt = f"Vel Left   ={velocityLeft} Vel Right = {velocityRight} theta = {int(math.degrees(theta))}"
        self.text = self.font.render(txt, True, self.white, self.black)
        self.map.blit(self.text, self.textRect)

    # drawing the trail of the robot as it moves along
    def trail(self, pos):
        for i in range(0, len(self.trailset) - 1):
            # draws the trail line
            pygame.draw.line(self.map, self.yel, (self.trailset[i][0], self.trailset[i][1]),
                             (self.trailset[i + 1][0], self.trailset[i + 1][1]),10)
            # if the trail list length more than 3000 items pop the very first one
        if self.trailset.__sizeof__() > 30000:
            self.trailset.pop(0)
        self.trailset.append(pos)

    def followGeneratedPath(self):
        pass


# initialization
class Robot:
    def __init__(self, startpos, robotimg, width):
        self.a = None
        self.path = []
        self.m2p = 3779.52  # meters/pixels
        # robot dimensions
        self.w = width
        self.x = startpos[0]
        self.y = startpos[1]
        self.theta = 0
        self.velocityleft = 0.01 * self.m2p
        self.velocityright = 0.01 * self.m2p
        self.maxspeed = 0.02 * self.m2p
        self.minspeed = 0.02 * self.m2p
        # loading the robot image
        self.img = pygame.image.load('cr.png')
        self.rotated = self.img
        self.rect = self.rotated.get_rect(center=(self.x, self.y))

    def drawRobot(self, map):
        map.blit(self.rotated, self.rect)

    def move(self, event=None):
        if event is not None:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_KP4:
                    self.velocityleft += 0.001 * self.m2p
                elif event.key == pygame.K_KP1:
                    self.velocityleft -= 0.001 * self.m2p
                elif event.key == pygame.K_KP6:
                    self.velocityright += 0.001 * self.m2p
                elif event.key == pygame.K_KP3:
                    self.velocityright -= 0.001 * self.m2p
                elif event.key == pygame.K_KP2:
                    self.theta = 0
                    self.velocityleft = 0.01 * self.m2p
                    self.velocityright = 0.01 * self.m2p
                    self.velocityleft = -self.velocityleft
                    self.velocityright = -self.velocityright
                elif event.key == pygame.K_KP5:
                    self.theta = 0
                    self.velocityleft = 0.01 * self.m2p
                    self.velocityright = 0.01 * self.m2p
                elif event.key == pygame.K_KP0:
                    self.theta = 0
                    self.velocityleft = 0
                    self.velocityright = 0

        # mathematical model for the differential drive robot movement
        self.x += ((self.velocityleft + self.velocityright) / 2) * math.cos(self.theta) * dt
        self.y -= ((self.velocityleft + self.velocityright) / 2) * math.sin(self.theta) * dt
        self.rotated = pygame.transform.rotozoom(self.img, math.degrees(self.theta), 1)
        self.theta += (self.velocityright - self.velocityleft) / self.w * dt
        self.rect = self.rotated.get_rect(center=(self.x, self.y))
        # self.x += (self.u + math.cos(self.theta) -self.a * math.sin(self.theta) * self.w) *dt
        # self.y += (self.u + math.sin(self.theta) -self.a * math.cos(self.theta) * self.w) *dt
        #self.theta += self.w *dt
        #self.rotated = pygame.transform.rotozoom(self.img, math.degrees( -self.theta), 1)
        #self.followPath()
    # def followPath(self):
    #     target = self.path[self.waypoint]
    #     delta_x = target[0] -self.x
    #     delta_y = target[1] -self.y
    #     self.u = delta_x *math.cos(self.theta) +delta_y*math.sin(self.theta)
    #     self.w = (-1/self.a) *math.sin(self.theta) *delta_x + (1/self.a) *math.cos(self.theta) *delta_y
    #     if self.dist((self.x,self.y), self.path[self.waypoint])<=35:
    #         self.waypoint -=1
    #     if self.waypoint <=0:
    #         self.waypoint =0


pygame.init()
# dt
dt = 0
lasttime = pygame.time.get_ticks()
dims = (1020,1008)
environment = Environment(dims)

start = (200, 200)


# junction coordinates
junction1 = (246, 156)
junction2 = (761, 156)
junction3 = (246, 490)
junction4 = (761, 490)
junction5 = (246, 819)
junction6 = (761, 819)

    # robot home positions
robot1loc = (39, 150)
robot2loc = (968, 150)
robot3loc = (968, 490)
robot4loc = (39, 819)
    # stations
station1 = (39, 150)
station2 = (968, 150)
station3 = (39, 490)
station4 = (968, 490)
station5 = (39, 819)
station6 = (968, 819)
robot = Robot(robot1loc,
              r"C:\Users\Vincent Karimi\Desktop\project\gui\png.png",
              0.01 * 3779.52)
running = True
while running:
    # activating the quit button
    for event in pygame.event.get():
        if event == pygame.QUIT:
            running = False
            pygame.quit()
        robot.move(event)
    screen = environment.map
    # defining the robot grid
    pg.draw.line(screen, (255, 255, 255), (0, 156), (1020, 156), 4)
    pg.draw.line(screen, (255, 255, 255), (0, 490), (1020, 490), 4)
    pg.draw.line(screen, (255, 255, 255), (0, 819), (1020, 819), 4)
    pg.draw.line(screen, (255, 255, 255), (246, 0), (246, 1008), 4)
    pg.draw.line(screen, (255, 255, 255), (761, 0), (761, 1008), 4)
    pg.draw.line(screen, (255, 255, 255), (39, 0), (39, 1008), 4)
    pg.draw.line(screen, (255, 255, 255), (968, 0), (968, 1008), 4)

    # station markers
    green = (0, 255, 0)
    home_position = (0, 0, 255)
    pg.draw.circle(screen, home_position, station1, 20)
    pg.draw.circle(screen, home_position, station2, 20)
    pg.draw.circle(screen, green, station3, 20)
    pg.draw.circle(screen, home_position, station4, 20)
    pg.draw.circle(screen, home_position, station5, 20)
    pg.draw.circle(screen, green, station6, 20)
    # the time derivative implementation
    dt = (pygame.time.get_ticks() - lasttime) / 1000
    lasttime = pygame.time.get_ticks()
    # update in each loop
    pygame.display.update()
    # fill the background in black
    environment.map.fill(environment.white)
    robot.move()
    robot.drawRobot(environment.map)

    environment.trail((robot.x, robot.y))
    environment.write_information(int(robot.velocityleft), int(robot.velocityright), robot.theta)
